package types

import (
	"fmt"
	"net/url"
	"time"

	"github.com/increase/increase-go/core"
	"github.com/increase/increase-go/core/pjson"
	"github.com/increase/increase-go/core/query"
	"github.com/increase/increase-go/pagination"
)

type File struct {
	// The time the File was created.
	CreatedAt *time.Time `pjson:"created_at" format:"2006-01-02T15:04:05Z07:00"`
	// The File's identifier.
	ID *string `pjson:"id"`
	// What the File will be used for. We may add additional possible values for this
	// enum over time; your application should be able to handle such additions
	// gracefully.
	Purpose *FilePurpose `pjson:"purpose"`
	// A description of the File.
	Description *string `pjson:"description"`
	// Whether the File was generated by Increase or by you and sent to Increase.
	Direction *FileDirection `pjson:"direction"`
	// The filename that was provided upon upload or generated by Increase.
	Filename *string `pjson:"filename"`
	// A URL from where the File can be downloaded at this point in time. The location
	// of this URL may change over time.
	DownloadURL *string `pjson:"download_url"`
	// A constant representing the object's type. For this resource it will always be
	// `file`.
	Type       *FileType              `pjson:"type"`
	jsonFields map[string]interface{} `pjson:"-,extras"`
}

// UnmarshalJSON deserializes the provided bytes into File using the internal pjson
// library. Unrecognized fields are stored in the `jsonFields` property.
func (r *File) UnmarshalJSON(data []byte) (err error) {
	return pjson.Unmarshal(data, r)
}

// MarshalJSON serializes File into an array of bytes using the gjson library.
// Members of the `jsonFields` field are serialized into the top-level, and will
// overwrite known members of the same name.
func (r *File) MarshalJSON() (data []byte, err error) {
	return pjson.Marshal(r)
}

// The time the File was created.
func (r File) GetCreatedAt() (CreatedAt time.Time) {
	if r.CreatedAt != nil {
		CreatedAt = *r.CreatedAt
	}
	return
}

// The File's identifier.
func (r File) GetID() (ID string) {
	if r.ID != nil {
		ID = *r.ID
	}
	return
}

// What the File will be used for. We may add additional possible values for this
// enum over time; your application should be able to handle such additions
// gracefully.
func (r File) GetPurpose() (Purpose FilePurpose) {
	if r.Purpose != nil {
		Purpose = *r.Purpose
	}
	return
}

// A description of the File.
func (r File) GetDescription() (Description string) {
	if r.Description != nil {
		Description = *r.Description
	}
	return
}

// Whether the File was generated by Increase or by you and sent to Increase.
func (r File) GetDirection() (Direction FileDirection) {
	if r.Direction != nil {
		Direction = *r.Direction
	}
	return
}

// The filename that was provided upon upload or generated by Increase.
func (r File) GetFilename() (Filename string) {
	if r.Filename != nil {
		Filename = *r.Filename
	}
	return
}

// A URL from where the File can be downloaded at this point in time. The location
// of this URL may change over time.
func (r File) GetDownloadURL() (DownloadURL string) {
	if r.DownloadURL != nil {
		DownloadURL = *r.DownloadURL
	}
	return
}

// A constant representing the object's type. For this resource it will always be
// `file`.
func (r File) GetType() (Type FileType) {
	if r.Type != nil {
		Type = *r.Type
	}
	return
}

func (r File) String() (result string) {
	return fmt.Sprintf("&File{CreatedAt:%s ID:%s Purpose:%s Description:%s Direction:%s Filename:%s DownloadURL:%s Type:%s}", core.FmtP(r.CreatedAt), core.FmtP(r.ID), core.FmtP(r.Purpose), core.FmtP(r.Description), core.FmtP(r.Direction), core.FmtP(r.Filename), core.FmtP(r.DownloadURL), core.FmtP(r.Type))
}

type FilePurpose string

const (
	FilePurposeCheckImageFront            FilePurpose = "check_image_front"
	FilePurposeCheckImageBack             FilePurpose = "check_image_back"
	FilePurposeForm_1099Int               FilePurpose = "form_1099_int"
	FilePurposeFormSs_4                   FilePurpose = "form_ss_4"
	FilePurposeIdentityDocument           FilePurpose = "identity_document"
	FilePurposeIncreaseStatement          FilePurpose = "increase_statement"
	FilePurposeOther                      FilePurpose = "other"
	FilePurposeTrustFormationDocument     FilePurpose = "trust_formation_document"
	FilePurposeDigitalWalletArtwork       FilePurpose = "digital_wallet_artwork"
	FilePurposeDigitalWalletAppIcon       FilePurpose = "digital_wallet_app_icon"
	FilePurposeEntitySupplementalDocument FilePurpose = "entity_supplemental_document"
	FilePurposeExport                     FilePurpose = "export"
)

type FileDirection string

const (
	FileDirectionToIncrease   FileDirection = "to_increase"
	FileDirectionFromIncrease FileDirection = "from_increase"
)

type FileType string

const (
	FileTypeFile FileType = "file"
)

type CreateAFileParameters struct {
	// The file contents. This should follow the specifications of
	// [RFC 7578](https://datatracker.ietf.org/doc/html/rfc7578) which defines file
	// transfers for the multipart/form-data protocol.
	File *string `pjson:"file"`
	// The description you choose to give the File.
	Description *string `pjson:"description"`
	// What the File will be used for in Increase's systems.
	Purpose    *CreateAFileParametersPurpose `pjson:"purpose"`
	jsonFields map[string]interface{}        `pjson:"-,extras"`
}

// UnmarshalJSON deserializes the provided bytes into CreateAFileParameters using
// the internal pjson library. Unrecognized fields are stored in the `jsonFields`
// property.
func (r *CreateAFileParameters) UnmarshalJSON(data []byte) (err error) {
	return pjson.Unmarshal(data, r)
}

// MarshalJSON serializes CreateAFileParameters into an array of bytes using the
// gjson library. Members of the `jsonFields` field are serialized into the
// top-level, and will overwrite known members of the same name.
func (r *CreateAFileParameters) MarshalJSON() (data []byte, err error) {
	return pjson.Marshal(r)
}

// The file contents. This should follow the specifications of
// [RFC 7578](https://datatracker.ietf.org/doc/html/rfc7578) which defines file
// transfers for the multipart/form-data protocol.
func (r CreateAFileParameters) GetFile() (File string) {
	if r.File != nil {
		File = *r.File
	}
	return
}

// The description you choose to give the File.
func (r CreateAFileParameters) GetDescription() (Description string) {
	if r.Description != nil {
		Description = *r.Description
	}
	return
}

// What the File will be used for in Increase's systems.
func (r CreateAFileParameters) GetPurpose() (Purpose CreateAFileParametersPurpose) {
	if r.Purpose != nil {
		Purpose = *r.Purpose
	}
	return
}

func (r CreateAFileParameters) String() (result string) {
	return fmt.Sprintf("&CreateAFileParameters{File:%s Description:%s Purpose:%s}", core.FmtP(r.File), core.FmtP(r.Description), core.FmtP(r.Purpose))
}

type CreateAFileParametersPurpose string

const (
	CreateAFileParametersPurposeCheckImageFront            CreateAFileParametersPurpose = "check_image_front"
	CreateAFileParametersPurposeCheckImageBack             CreateAFileParametersPurpose = "check_image_back"
	CreateAFileParametersPurposeFormSs_4                   CreateAFileParametersPurpose = "form_ss_4"
	CreateAFileParametersPurposeIdentityDocument           CreateAFileParametersPurpose = "identity_document"
	CreateAFileParametersPurposeOther                      CreateAFileParametersPurpose = "other"
	CreateAFileParametersPurposeTrustFormationDocument     CreateAFileParametersPurpose = "trust_formation_document"
	CreateAFileParametersPurposeDigitalWalletArtwork       CreateAFileParametersPurpose = "digital_wallet_artwork"
	CreateAFileParametersPurposeDigitalWalletAppIcon       CreateAFileParametersPurpose = "digital_wallet_app_icon"
	CreateAFileParametersPurposeEntitySupplementalDocument CreateAFileParametersPurpose = "entity_supplemental_document"
)

type FileListParams struct {
	// Return the page of entries after this one.
	Cursor *string `query:"cursor"`
	// Limit the size of the list that is returned. The default (and maximum) is 100
	// objects.
	Limit      *int64                   `query:"limit"`
	CreatedAt  *FileListParamsCreatedAt `query:"created_at"`
	Purpose    *FileListParamsPurpose   `query:"purpose"`
	jsonFields map[string]interface{}   `pjson:"-,extras"`
}

// UnmarshalJSON deserializes the provided bytes into FileListParams using the
// internal pjson library. Unrecognized fields are stored in the `jsonFields`
// property.
func (r *FileListParams) UnmarshalJSON(data []byte) (err error) {
	return pjson.Unmarshal(data, r)
}

// MarshalJSON serializes FileListParams into an array of bytes using the gjson
// library. Members of the `jsonFields` field are serialized into the top-level,
// and will overwrite known members of the same name.
func (r *FileListParams) MarshalJSON() (data []byte, err error) {
	return pjson.Marshal(r)
}

// URLQuery serializes FileListParams into a url.Values of the query parameters
// associated with this value
func (r *FileListParams) URLQuery() (v url.Values) {
	return query.Marshal(r)
}

// Return the page of entries after this one.
func (r FileListParams) GetCursor() (Cursor string) {
	if r.Cursor != nil {
		Cursor = *r.Cursor
	}
	return
}

// Limit the size of the list that is returned. The default (and maximum) is 100
// objects.
func (r FileListParams) GetLimit() (Limit int64) {
	if r.Limit != nil {
		Limit = *r.Limit
	}
	return
}

func (r FileListParams) GetCreatedAt() (CreatedAt FileListParamsCreatedAt) {
	if r.CreatedAt != nil {
		CreatedAt = *r.CreatedAt
	}
	return
}

func (r FileListParams) GetPurpose() (Purpose FileListParamsPurpose) {
	if r.Purpose != nil {
		Purpose = *r.Purpose
	}
	return
}

func (r FileListParams) String() (result string) {
	return fmt.Sprintf("&FileListParams{Cursor:%s Limit:%s CreatedAt:%s Purpose:%s}", core.FmtP(r.Cursor), core.FmtP(r.Limit), r.CreatedAt, r.Purpose)
}

type FileListParamsCreatedAt struct {
	// Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// timestamp.
	After *time.Time `pjson:"after" format:"2006-01-02T15:04:05Z07:00"`
	// Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// timestamp.
	Before *time.Time `pjson:"before" format:"2006-01-02T15:04:05Z07:00"`
	// Return results on or after this
	// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.
	OnOrAfter *time.Time `pjson:"on_or_after" format:"2006-01-02T15:04:05Z07:00"`
	// Return results on or before this
	// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.
	OnOrBefore *time.Time             `pjson:"on_or_before" format:"2006-01-02T15:04:05Z07:00"`
	jsonFields map[string]interface{} `pjson:"-,extras"`
}

// UnmarshalJSON deserializes the provided bytes into FileListParamsCreatedAt using
// the internal pjson library. Unrecognized fields are stored in the `jsonFields`
// property.
func (r *FileListParamsCreatedAt) UnmarshalJSON(data []byte) (err error) {
	return pjson.Unmarshal(data, r)
}

// MarshalJSON serializes FileListParamsCreatedAt into an array of bytes using the
// gjson library. Members of the `jsonFields` field are serialized into the
// top-level, and will overwrite known members of the same name.
func (r *FileListParamsCreatedAt) MarshalJSON() (data []byte, err error) {
	return pjson.Marshal(r)
}

// URLQuery serializes FileListParamsCreatedAt into a url.Values of the query
// parameters associated with this value
func (r *FileListParamsCreatedAt) URLQuery() (v url.Values) {
	return query.Marshal(r)
}

// Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
// timestamp.
func (r FileListParamsCreatedAt) GetAfter() (After time.Time) {
	if r.After != nil {
		After = *r.After
	}
	return
}

// Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
// timestamp.
func (r FileListParamsCreatedAt) GetBefore() (Before time.Time) {
	if r.Before != nil {
		Before = *r.Before
	}
	return
}

// Return results on or after this
// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.
func (r FileListParamsCreatedAt) GetOnOrAfter() (OnOrAfter time.Time) {
	if r.OnOrAfter != nil {
		OnOrAfter = *r.OnOrAfter
	}
	return
}

// Return results on or before this
// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.
func (r FileListParamsCreatedAt) GetOnOrBefore() (OnOrBefore time.Time) {
	if r.OnOrBefore != nil {
		OnOrBefore = *r.OnOrBefore
	}
	return
}

func (r FileListParamsCreatedAt) String() (result string) {
	return fmt.Sprintf("&FileListParamsCreatedAt{After:%s Before:%s OnOrAfter:%s OnOrBefore:%s}", core.FmtP(r.After), core.FmtP(r.Before), core.FmtP(r.OnOrAfter), core.FmtP(r.OnOrBefore))
}

type FileListParamsPurpose struct {
	// Return results whose value is in the provided list. For GET requests, this
	// should be encoded as a comma-delimited string, such as `?in=one,two,three`.
	In         *[]FileListParamsPurposeIn `pjson:"in"`
	jsonFields map[string]interface{}     `pjson:"-,extras"`
}

// UnmarshalJSON deserializes the provided bytes into FileListParamsPurpose using
// the internal pjson library. Unrecognized fields are stored in the `jsonFields`
// property.
func (r *FileListParamsPurpose) UnmarshalJSON(data []byte) (err error) {
	return pjson.Unmarshal(data, r)
}

// MarshalJSON serializes FileListParamsPurpose into an array of bytes using the
// gjson library. Members of the `jsonFields` field are serialized into the
// top-level, and will overwrite known members of the same name.
func (r *FileListParamsPurpose) MarshalJSON() (data []byte, err error) {
	return pjson.Marshal(r)
}

// URLQuery serializes FileListParamsPurpose into a url.Values of the query
// parameters associated with this value
func (r *FileListParamsPurpose) URLQuery() (v url.Values) {
	return query.Marshal(r)
}

// Return results whose value is in the provided list. For GET requests, this
// should be encoded as a comma-delimited string, such as `?in=one,two,three`.
func (r FileListParamsPurpose) GetIn() (In []FileListParamsPurposeIn) {
	if r.In != nil {
		In = *r.In
	}
	return
}

func (r FileListParamsPurpose) String() (result string) {
	return fmt.Sprintf("&FileListParamsPurpose{In:%s}", core.Fmt(r.In))
}

type FileListParamsPurposeIn string

const (
	FileListParamsPurposeInCheckImageFront            FileListParamsPurposeIn = "check_image_front"
	FileListParamsPurposeInCheckImageBack             FileListParamsPurposeIn = "check_image_back"
	FileListParamsPurposeInForm_1099Int               FileListParamsPurposeIn = "form_1099_int"
	FileListParamsPurposeInFormSs_4                   FileListParamsPurposeIn = "form_ss_4"
	FileListParamsPurposeInIdentityDocument           FileListParamsPurposeIn = "identity_document"
	FileListParamsPurposeInIncreaseStatement          FileListParamsPurposeIn = "increase_statement"
	FileListParamsPurposeInOther                      FileListParamsPurposeIn = "other"
	FileListParamsPurposeInTrustFormationDocument     FileListParamsPurposeIn = "trust_formation_document"
	FileListParamsPurposeInDigitalWalletArtwork       FileListParamsPurposeIn = "digital_wallet_artwork"
	FileListParamsPurposeInDigitalWalletAppIcon       FileListParamsPurposeIn = "digital_wallet_app_icon"
	FileListParamsPurposeInEntitySupplementalDocument FileListParamsPurposeIn = "entity_supplemental_document"
	FileListParamsPurposeInExport                     FileListParamsPurposeIn = "export"
)

type FileList struct {
	// The contents of the list.
	Data *[]File `pjson:"data"`
	// A pointer to a place in the list.
	NextCursor *string                `pjson:"next_cursor"`
	jsonFields map[string]interface{} `pjson:"-,extras"`
}

// UnmarshalJSON deserializes the provided bytes into FileList using the internal
// pjson library. Unrecognized fields are stored in the `jsonFields` property.
func (r *FileList) UnmarshalJSON(data []byte) (err error) {
	return pjson.Unmarshal(data, r)
}

// MarshalJSON serializes FileList into an array of bytes using the gjson library.
// Members of the `jsonFields` field are serialized into the top-level, and will
// overwrite known members of the same name.
func (r *FileList) MarshalJSON() (data []byte, err error) {
	return pjson.Marshal(r)
}

// URLQuery serializes FileList into a url.Values of the query parameters
// associated with this value
func (r *FileList) URLQuery() (v url.Values) {
	return query.Marshal(r)
}

// The contents of the list.
func (r FileList) GetData() (Data []File) {
	if r.Data != nil {
		Data = *r.Data
	}
	return
}

// A pointer to a place in the list.
func (r FileList) GetNextCursor() (NextCursor string) {
	if r.NextCursor != nil {
		NextCursor = *r.NextCursor
	}
	return
}

func (r FileList) String() (result string) {
	return fmt.Sprintf("&FileList{Data:%s NextCursor:%s}", core.Fmt(r.Data), core.FmtP(r.NextCursor))
}

type FilesPage struct {
	*pagination.Page[File]
}

func (r *FilesPage) File() *File {
	return r.Current()
}

func (r *FilesPage) NextPage() (*FilesPage, error) {
	if page, err := r.Page.NextPage(); err != nil {
		return nil, err
	} else {
		return &FilesPage{page}, nil
	}
}
