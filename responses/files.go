package responses

import (
	"time"

	pjson "github.com/increase/increase-go/core/json"
	"github.com/increase/increase-go/pagination"
)

type File struct {
	// The time the File was created.
	CreatedAt time.Time `json:"created_at,required" format:"date-time"`
	// The File's identifier.
	ID string `json:"id,required"`
	// What the File will be used for. We may add additional possible values for this
	// enum over time; your application should be able to handle such additions
	// gracefully.
	Purpose FilePurpose `json:"purpose,required"`
	// A description of the File.
	Description string `json:"description,required,nullable"`
	// Whether the File was generated by Increase or by you and sent to Increase.
	Direction FileDirection `json:"direction,required"`
	// The filename that was provided upon upload or generated by Increase.
	Filename string `json:"filename,required,nullable"`
	// A URL from where the File can be downloaded at this point in time. The location
	// of this URL may change over time.
	DownloadURL string `json:"download_url,required,nullable"`
	// A constant representing the object's type. For this resource it will always be
	// `file`.
	Type FileType `json:"type,required"`
	JSON FileJSON
}

type FileJSON struct {
	CreatedAt   pjson.Metadata
	ID          pjson.Metadata
	Purpose     pjson.Metadata
	Description pjson.Metadata
	Direction   pjson.Metadata
	Filename    pjson.Metadata
	DownloadURL pjson.Metadata
	Type        pjson.Metadata
	Raw         []byte
	Extras      map[string]pjson.Metadata
}

// UnmarshalJSON deserializes the provided bytes into File using the internal pjson
// library. Unrecognized fields are stored in the `jsonFields` property.
func (r *File) UnmarshalJSON(data []byte) (err error) {
	return pjson.UnmarshalRoot(data, r)
}

type FilePurpose string

const (
	FilePurposeCheckImageFront            FilePurpose = "check_image_front"
	FilePurposeCheckImageBack             FilePurpose = "check_image_back"
	FilePurposeForm_1099Int               FilePurpose = "form_1099_int"
	FilePurposeFormSs_4                   FilePurpose = "form_ss_4"
	FilePurposeIdentityDocument           FilePurpose = "identity_document"
	FilePurposeIncreaseStatement          FilePurpose = "increase_statement"
	FilePurposeOther                      FilePurpose = "other"
	FilePurposeTrustFormationDocument     FilePurpose = "trust_formation_document"
	FilePurposeDigitalWalletArtwork       FilePurpose = "digital_wallet_artwork"
	FilePurposeDigitalWalletAppIcon       FilePurpose = "digital_wallet_app_icon"
	FilePurposeEntitySupplementalDocument FilePurpose = "entity_supplemental_document"
	FilePurposeExport                     FilePurpose = "export"
)

type FileDirection string

const (
	FileDirectionToIncrease   FileDirection = "to_increase"
	FileDirectionFromIncrease FileDirection = "from_increase"
)

type FileType string

const (
	FileTypeFile FileType = "file"
)

type FileList struct {
	// The contents of the list.
	Data []File `json:"data,required"`
	// A pointer to a place in the list.
	NextCursor string `json:"next_cursor,required,nullable"`
	JSON       FileListJSON
}

type FileListJSON struct {
	Data       pjson.Metadata
	NextCursor pjson.Metadata
	Raw        []byte
	Extras     map[string]pjson.Metadata
}

// UnmarshalJSON deserializes the provided bytes into FileList using the internal
// pjson library. Unrecognized fields are stored in the `jsonFields` property.
func (r *FileList) UnmarshalJSON(data []byte) (err error) {
	return pjson.UnmarshalRoot(data, r)
}

type FilesPage struct {
	*pagination.Page[File]
}

func (r *FilesPage) File() *File {
	return r.Current()
}

func (r *FilesPage) NextPage() (*FilesPage, error) {
	if page, err := r.Page.NextPage(); err != nil {
		return nil, err
	} else {
		return &FilesPage{page}, nil
	}
}
