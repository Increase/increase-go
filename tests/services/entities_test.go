package services

import (
	"context"
	"errors"
	"net/http/httputil"
	"testing"
	"time"

	"github.com/increase/increase-go"
	"github.com/increase/increase-go/core"
	"github.com/increase/increase-go/fields"
	"github.com/increase/increase-go/options"
	"github.com/increase/increase-go/requests"
)

func TestEntitiesNewWithOptionalParams(t *testing.T) {
	c := increase.NewIncrease(options.WithAPIKey("APIKey"), options.WithBaseURL("http://127.0.0.1:4010"))
	_, err := c.Entities.New(context.TODO(), &requests.CreateAnEntityParameters{Structure: fields.F(requests.CreateAnEntityParametersStructureCorporation), Corporation: fields.F(requests.CreateAnEntityParametersCorporation{Name: fields.F("National Phonograph Company"), Website: fields.F("https://example.com"), TaxIdentifier: fields.F("602214076"), IncorporationState: fields.F("NY"), Address: fields.F(requests.CreateAnEntityParametersCorporationAddress{Line1: fields.F("33 Liberty Street"), Line2: fields.F("x"), City: fields.F("New York"), State: fields.F("NY"), Zip: fields.F("10045")}), BeneficialOwners: fields.F([]requests.CreateAnEntityParametersCorporationBeneficialOwners{{Individual: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividual{Name: fields.F("x"), DateOfBirth: fields.F(time.Now()), Address: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualAddress{Line1: fields.F("x"), Line2: fields.F("x"), City: fields.F("x"), State: fields.F("x"), Zip: fields.F("x")}), ConfirmedNoUsTaxID: fields.F(true), Identification: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentification{Method: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodSocialSecurityNumber), Number: fields.F("xxxx"), Passport: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationPassport{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), Country: fields.F("x")}), DriversLicense: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationDriversLicense{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), State: fields.F("x")}), Other: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationOther{Country: fields.F("x"), Description: fields.F("x"), ExpirationDate: fields.F(time.Now()), FileID: fields.F("string")})})}), CompanyTitle: fields.F("x"), Prong: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersProngOwnership)}, {Individual: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividual{Name: fields.F("x"), DateOfBirth: fields.F(time.Now()), Address: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualAddress{Line1: fields.F("x"), Line2: fields.F("x"), City: fields.F("x"), State: fields.F("x"), Zip: fields.F("x")}), ConfirmedNoUsTaxID: fields.F(true), Identification: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentification{Method: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodSocialSecurityNumber), Number: fields.F("xxxx"), Passport: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationPassport{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), Country: fields.F("x")}), DriversLicense: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationDriversLicense{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), State: fields.F("x")}), Other: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationOther{Country: fields.F("x"), Description: fields.F("x"), ExpirationDate: fields.F(time.Now()), FileID: fields.F("string")})})}), CompanyTitle: fields.F("x"), Prong: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersProngOwnership)}, {Individual: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividual{Name: fields.F("x"), DateOfBirth: fields.F(time.Now()), Address: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualAddress{Line1: fields.F("x"), Line2: fields.F("x"), City: fields.F("x"), State: fields.F("x"), Zip: fields.F("x")}), ConfirmedNoUsTaxID: fields.F(true), Identification: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentification{Method: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodSocialSecurityNumber), Number: fields.F("xxxx"), Passport: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationPassport{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), Country: fields.F("x")}), DriversLicense: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationDriversLicense{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), State: fields.F("x")}), Other: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationOther{Country: fields.F("x"), Description: fields.F("x"), ExpirationDate: fields.F(time.Now()), FileID: fields.F("string")})})}), CompanyTitle: fields.F("x"), Prong: fields.F(requests.CreateAnEntityParametersCorporationBeneficialOwnersProngOwnership)}})}), NaturalPerson: fields.F(requests.CreateAnEntityParametersNaturalPerson{Name: fields.F("x"), DateOfBirth: fields.F(time.Now()), Address: fields.F(requests.CreateAnEntityParametersNaturalPersonAddress{Line1: fields.F("x"), Line2: fields.F("x"), City: fields.F("x"), State: fields.F("x"), Zip: fields.F("x")}), ConfirmedNoUsTaxID: fields.F(true), Identification: fields.F(requests.CreateAnEntityParametersNaturalPersonIdentification{Method: fields.F(requests.CreateAnEntityParametersNaturalPersonIdentificationMethodSocialSecurityNumber), Number: fields.F("xxxx"), Passport: fields.F(requests.CreateAnEntityParametersNaturalPersonIdentificationPassport{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), Country: fields.F("x")}), DriversLicense: fields.F(requests.CreateAnEntityParametersNaturalPersonIdentificationDriversLicense{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), State: fields.F("x")}), Other: fields.F(requests.CreateAnEntityParametersNaturalPersonIdentificationOther{Country: fields.F("x"), Description: fields.F("x"), ExpirationDate: fields.F(time.Now()), FileID: fields.F("string")})})}), Joint: fields.F(requests.CreateAnEntityParametersJoint{Name: fields.F("x"), Individuals: fields.F([]requests.CreateAnEntityParametersJointIndividuals{{Name: fields.F("x"), DateOfBirth: fields.F(time.Now()), Address: fields.F(requests.CreateAnEntityParametersJointIndividualsAddress{Line1: fields.F("x"), Line2: fields.F("x"), City: fields.F("x"), State: fields.F("x"), Zip: fields.F("x")}), ConfirmedNoUsTaxID: fields.F(true), Identification: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentification{Method: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentificationMethodSocialSecurityNumber), Number: fields.F("xxxx"), Passport: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentificationPassport{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), Country: fields.F("x")}), DriversLicense: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentificationDriversLicense{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), State: fields.F("x")}), Other: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentificationOther{Country: fields.F("x"), Description: fields.F("x"), ExpirationDate: fields.F(time.Now()), FileID: fields.F("string")})})}, {Name: fields.F("x"), DateOfBirth: fields.F(time.Now()), Address: fields.F(requests.CreateAnEntityParametersJointIndividualsAddress{Line1: fields.F("x"), Line2: fields.F("x"), City: fields.F("x"), State: fields.F("x"), Zip: fields.F("x")}), ConfirmedNoUsTaxID: fields.F(true), Identification: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentification{Method: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentificationMethodSocialSecurityNumber), Number: fields.F("xxxx"), Passport: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentificationPassport{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), Country: fields.F("x")}), DriversLicense: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentificationDriversLicense{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), State: fields.F("x")}), Other: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentificationOther{Country: fields.F("x"), Description: fields.F("x"), ExpirationDate: fields.F(time.Now()), FileID: fields.F("string")})})}, {Name: fields.F("x"), DateOfBirth: fields.F(time.Now()), Address: fields.F(requests.CreateAnEntityParametersJointIndividualsAddress{Line1: fields.F("x"), Line2: fields.F("x"), City: fields.F("x"), State: fields.F("x"), Zip: fields.F("x")}), ConfirmedNoUsTaxID: fields.F(true), Identification: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentification{Method: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentificationMethodSocialSecurityNumber), Number: fields.F("xxxx"), Passport: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentificationPassport{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), Country: fields.F("x")}), DriversLicense: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentificationDriversLicense{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), State: fields.F("x")}), Other: fields.F(requests.CreateAnEntityParametersJointIndividualsIdentificationOther{Country: fields.F("x"), Description: fields.F("x"), ExpirationDate: fields.F(time.Now()), FileID: fields.F("string")})})}})}), Trust: fields.F(requests.CreateAnEntityParametersTrust{Name: fields.F("x"), Category: fields.F(requests.CreateAnEntityParametersTrustCategoryRevocable), TaxIdentifier: fields.F("x"), FormationState: fields.F("x"), Address: fields.F(requests.CreateAnEntityParametersTrustAddress{Line1: fields.F("x"), Line2: fields.F("x"), City: fields.F("x"), State: fields.F("x"), Zip: fields.F("x")}), FormationDocumentFileID: fields.F("string"), Trustees: fields.F([]requests.CreateAnEntityParametersTrustTrustees{{Structure: fields.F(requests.CreateAnEntityParametersTrustTrusteesStructureIndividual), Individual: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividual{Name: fields.F("x"), DateOfBirth: fields.F(time.Now()), Address: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualAddress{Line1: fields.F("x"), Line2: fields.F("x"), City: fields.F("x"), State: fields.F("x"), Zip: fields.F("x")}), ConfirmedNoUsTaxID: fields.F(true), Identification: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentification{Method: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodSocialSecurityNumber), Number: fields.F("xxxx"), Passport: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentificationPassport{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), Country: fields.F("x")}), DriversLicense: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentificationDriversLicense{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), State: fields.F("x")}), Other: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentificationOther{Country: fields.F("x"), Description: fields.F("x"), ExpirationDate: fields.F(time.Now()), FileID: fields.F("string")})})})}, {Structure: fields.F(requests.CreateAnEntityParametersTrustTrusteesStructureIndividual), Individual: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividual{Name: fields.F("x"), DateOfBirth: fields.F(time.Now()), Address: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualAddress{Line1: fields.F("x"), Line2: fields.F("x"), City: fields.F("x"), State: fields.F("x"), Zip: fields.F("x")}), ConfirmedNoUsTaxID: fields.F(true), Identification: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentification{Method: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodSocialSecurityNumber), Number: fields.F("xxxx"), Passport: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentificationPassport{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), Country: fields.F("x")}), DriversLicense: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentificationDriversLicense{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), State: fields.F("x")}), Other: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentificationOther{Country: fields.F("x"), Description: fields.F("x"), ExpirationDate: fields.F(time.Now()), FileID: fields.F("string")})})})}, {Structure: fields.F(requests.CreateAnEntityParametersTrustTrusteesStructureIndividual), Individual: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividual{Name: fields.F("x"), DateOfBirth: fields.F(time.Now()), Address: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualAddress{Line1: fields.F("x"), Line2: fields.F("x"), City: fields.F("x"), State: fields.F("x"), Zip: fields.F("x")}), ConfirmedNoUsTaxID: fields.F(true), Identification: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentification{Method: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodSocialSecurityNumber), Number: fields.F("xxxx"), Passport: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentificationPassport{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), Country: fields.F("x")}), DriversLicense: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentificationDriversLicense{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), State: fields.F("x")}), Other: fields.F(requests.CreateAnEntityParametersTrustTrusteesIndividualIdentificationOther{Country: fields.F("x"), Description: fields.F("x"), ExpirationDate: fields.F(time.Now()), FileID: fields.F("string")})})})}}), Grantor: fields.F(requests.CreateAnEntityParametersTrustGrantor{Name: fields.F("x"), DateOfBirth: fields.F(time.Now()), Address: fields.F(requests.CreateAnEntityParametersTrustGrantorAddress{Line1: fields.F("x"), Line2: fields.F("x"), City: fields.F("x"), State: fields.F("x"), Zip: fields.F("x")}), ConfirmedNoUsTaxID: fields.F(true), Identification: fields.F(requests.CreateAnEntityParametersTrustGrantorIdentification{Method: fields.F(requests.CreateAnEntityParametersTrustGrantorIdentificationMethodSocialSecurityNumber), Number: fields.F("xxxx"), Passport: fields.F(requests.CreateAnEntityParametersTrustGrantorIdentificationPassport{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), Country: fields.F("x")}), DriversLicense: fields.F(requests.CreateAnEntityParametersTrustGrantorIdentificationDriversLicense{FileID: fields.F("string"), ExpirationDate: fields.F(time.Now()), State: fields.F("x")}), Other: fields.F(requests.CreateAnEntityParametersTrustGrantorIdentificationOther{Country: fields.F("x"), Description: fields.F("x"), ExpirationDate: fields.F(time.Now()), FileID: fields.F("string")})})})}), Description: fields.F("x"), Relationship: fields.F(requests.CreateAnEntityParametersRelationshipAffiliated), SupplementalDocuments: fields.F([]requests.CreateAnEntityParametersSupplementalDocuments{{FileID: fields.F("string")}, {FileID: fields.F("string")}, {FileID: fields.F("string")}})})
	if err != nil {
		var apiError core.APIError
		if errors.As(err, &apiError) {
			body, _ := httputil.DumpRequest(apiError.Request(), true)
			println(string(body))
		}
		t.Fatalf("err should be nil: %s", err.Error())
	}
}

func TestEntitiesGet(t *testing.T) {
	c := increase.NewIncrease(options.WithAPIKey("APIKey"), options.WithBaseURL("http://127.0.0.1:4010"))
	_, err := c.Entities.Get(
		context.TODO(),
		"entity_n8y8tnk2p9339ti393yi",
	)
	if err != nil {
		var apiError core.APIError
		if errors.As(err, &apiError) {
			body, _ := httputil.DumpRequest(apiError.Request(), true)
			println(string(body))
		}
		t.Fatalf("err should be nil: %s", err.Error())
	}
}

func TestEntitiesListWithOptionalParams(t *testing.T) {
	c := increase.NewIncrease(options.WithAPIKey("APIKey"), options.WithBaseURL("http://127.0.0.1:4010"))
	_, err := c.Entities.List(context.TODO(), &requests.EntityListParams{Cursor: fields.F("string"), Limit: fields.F(int64(0))})
	if err != nil {
		var apiError core.APIError
		if errors.As(err, &apiError) {
			body, _ := httputil.DumpRequest(apiError.Request(), true)
			println(string(body))
		}
		t.Fatalf("err should be nil: %s", err.Error())
	}
}
